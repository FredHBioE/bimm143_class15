knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"
# Import metadata and take a peak
colData = read.csv(metaFile, row.names=1)
head(colData)
countData = read.csv(countFile, row.names=1)
head(countData)
# Note we need to remove the odd first $length col
countData <- as.matrix(countData[, -1])
head(countData)
library(DESeq2)
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"
# Import metadata and take a peak
colData = read.csv(metaFile, row.names=1)
head(colData)
countData = read.csv(countFile, row.names=1)
head(countData)
# Note we need to remove the odd first $length col
countData <- as.matrix(countData[, -1])
head(countData)
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"
# Import metadata and take a peak
colData = read.csv(metaFile, row.names=1)
head(colData)
countData = read.csv(countFile, row.names=1)
head(countData)
suppressMessages(library(DESeq2))
countData = countData[rowSums(countData[,]) != 0, ]
head(countData)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(DESeq2))
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"
# Import metadata and take a peak
colData = read.csv(metaFile, row.names=1)
head(colData)
countData = read.csv(countFile, row.names=1)
head(countData)
# Note we need to remove the odd first $length col
countData <- as.matrix(countData[, -1])
head(countData)
countData = countData[rowSums(countData[,]) != 0, ]
head(countData)
dds = DESeqDataSetFromMatrix(countData=countData,
colData=colData,
design=~condition)
dds = DESeq(dds)
dds
# Filter count data where you have 0 read count across all samples.
countData = countData[rowSums(countData[,]) != 0, ]
head(countData)
nrows(countData)
# Filter count data where you have 0 read count across all samples.
countData = countData[rowSums(countData[,]) != 0, ]
head(countData)
nrow(countData)
dds = DESeqDataSetFromMatrix(countData=countData,
colData=colData,
design=~condition)
dds = DESeq(dds)
dds
res <- results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
summary(res)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(DESeq2))
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"
# Import metadata and take a peak
colData = read.csv(metaFile, row.names=1)
head(colData)
countData = read.csv(countFile, row.names=1)
head(countData)
# Note we need to remove the odd first $length col
countData <- as.matrix(countData[, -1])
head(countData)
# Filter count data where you have 0 read count across all samples.
countData = countData[rowSums(countData[,]) != 0, ]
head(countData)
nrow(countData)
dds = DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~condition)
dds = DESeq(dds)
res <- results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
summary(res)
plot(res$log2FoldChange, -log(res$pvalue))
plot(res$log2FoldChange, -log(res$padj))
plot(res$log2FoldChange, -log(res$padj), pch = 20)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "red"
inds <- (-log(res$padj) < 1) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "blue"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "red"
inds <- (-log(res$padj) < 10) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "blue"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 10) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
mycols[inds] <- "red"
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 10) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 8) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 5) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(rev$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(rev$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(rev$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
res <- results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(rev$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 18)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 17)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 19)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 12)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 11)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 10)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 14)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 1)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
mycols[abs(res$log2FoldChange) > 2] <- "blue"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 1)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 2) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.01), col = "green", lty = 2, lwd = 2)
mycols <- rep("gray", nrow(res) )
mycols[abs(res$log2FoldChange) > 2] <- "blue"
inds <- (-log(res$padj) < 4) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "red"
plot(res$log2FoldChange, -log(res$padj), col = mycols, pch = 20)
abline(v = c(-2, 2), col = "green", lty = 2, lwd = 2)
abline(h = -log(0.0001), col = "green", lty = 2, lwd = 2)
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
res$symbol = mapIds(org.Hs.eg.db,
keys=___,
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
res$symbol = mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="SYMBOL",
multiVals="first")
res$entrez = mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="ENTREZID",
multiVals="first")
res$name =   mapIds(org.Hs.eg.db,
keys=row.names(res),
keytype="ENSEMBL",
column="GENENAME",
multiVals="first")
head(res, 10)
res = res[order(res$pvalue),]
write.csv(res, file = "deseq_results.csv")
install.packages(c("pathview", "gage", "gageData"))
source("http://bioconductor.org/biocLite.R")
biocLite( c("pathview", "gage", "gageData") )
library(pathview)
library(pathview)
library(gage)
library(gageData)
data(kegg.sets.hs)
data(sigmet.idx.hs)
# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]
# Examine the first 3 pathways
head(kegg.sets.hs, 3)
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
head(keggres$less)
pathview(gene.data=foldchanges, pathway.id="hsa04110")
knit_with_parameters('C:/Users/Fred/Desktop/Junior 3 - Spring 2019/BIMM 143/BIMM_143_Lab_15_Genome_Annotation/bimm143_class15/bimm_143_class_15.Rmd')
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]
# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
data(go.sets.hs)
data(go.subs.hs)
# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]
gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)
lapply(gobpres, head)
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
